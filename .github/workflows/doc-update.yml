name: Documentation Update

on:
  workflow_dispatch:
    inputs:
      test_repo:
        description: 'Repository URL to test with'
        required: false
        default: 'https://github.com/CodeBoarding/insights-core'
        type: string
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get repository URL
        id: repo-url
        run: |
          # Use test repository if provided via workflow_dispatch, otherwise use current repo
          if [ "${{ github.event.inputs.test_repo }}" != "" ]; then
            REPO_URL="${{ github.event.inputs.test_repo }}"
            echo "Using test repository: $REPO_URL"
          else
            REPO_URL="${{ github.server_url }}/${{ github.repository }}"
            echo "Using current repository: $REPO_URL"
          fi
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

      - name: Fetch documentation files
        id: fetch-docs
        run: |
          # Replace this with your actual endpoint URL
          ENDPOINT_URL="${{ vars.CODEBOARDING_ENDPOINT || 'http://0.0.0.0:8000/generate_docs' }}"
          REPO_URL="${{ steps.repo-url.outputs.repo_url }}"
          
          echo "Fetching documentation from: $ENDPOINT_URL?url=$REPO_URL"
          
          # Make the API call and save response
          response=$(curl -s -w "%{http_code}" -o response.json "$ENDPOINT_URL?url=$REPO_URL")
          http_code=${response: -3}
          
          if [ "$http_code" != "200" ]; then
            echo "Error: API call failed with status code $http_code"
            cat response.json
            exit 1
          fi
          
          # Check if response is valid JSON
          if ! jq empty response.json 2>/dev/null; then
            echo "Error: Invalid JSON response"
            cat response.json
            exit 1
          fi
          
          echo "API call successful"
          echo "Response JSON contents:"
          cat response.json

      - name: Create .codeboarding directory and files
        run: |
          # Create the .codeboarding directory
          mkdir -p .codeboarding
          
          # Debug: Print response.json structure and keys
          echo "=== JSON DEBUGGING ==="
          echo "Response JSON structure:"
          jq . response.json
          
          echo "Top-level keys in response:"
          jq 'keys' response.json
          
          echo "Checking if 'files' key exists:"
          jq 'has("files")' response.json
          
          echo "If files exists, what type is it:"
          jq 'if has("files") then (.files | type) else "files key not found" end' response.json
          
          echo "If files exists, what are its keys:"
          jq 'if has("files") then (.files | keys) else "files key not found" end' response.json
          echo "=== END JSON DEBUGGING ==="
          
          # Parse JSON response and create files using keys as filenames
          if jq -e '.files' response.json > /dev/null; then
            echo "Files key found, proceeding to create files..."
            
            # Get each key from files object and create a file with that name
            jq -r '.files | keys[]' response.json | while read -r filename; do
              echo "Processing file: $filename"
              
              # Get the content for this filename
              content=$(jq -r ".files[\"$filename\"]" response.json)
              
              # Add .md extension if not present
              if [[ "$filename" != *.md ]]; then
                output_filename="${filename}.md"
              else
                output_filename="$filename"
              fi
              
              # Write content to file
              echo "$content" > ".codeboarding/$output_filename"
              echo "Created file: .codeboarding/$output_filename"
            done
          else
            echo "No 'files' key found in response JSON"
          fi
          
          # List created files
          echo "Files created in .codeboarding:"
          ls -la .codeboarding/
          
          # Show a sample of file contents for debugging
          echo "Sample file contents:"
          for file in .codeboarding/*.md; do
            if [ -f "$file" ]; then
              echo "=== Contents of $file (first 10 lines) ==="
              head -10 "$file"
              echo "=== End of $file sample ==="
              break
            fi
          done

      - name: Check for changes
        id: changes
        run: |
          # Add .codeboarding to git to check for changes
          git add .codeboarding/
          
          # Check if there are any changes
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git diff --cached --name-status
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update codeboarding documentation"
          title: "doc update"
          body: |
            ## Documentation Update
            
            This PR contains updated documentation files fetched from the codeboarding service.
            
            ### Changes
            - Updated files in `.codeboarding/` directory
            - Files fetched from: ${{ vars.CODEBOARDING_ENDPOINT || 'codeboarding endpoint' }}
            - Repository: ${{ steps.repo-url.outputs.repo_url }}
            
            This PR was automatically generated by the documentation update workflow.
          branch: docs/codeboarding-update
          base: main
          delete-branch: true

      # - name: Cleanup
      #   if: success()
      #   run: |
      #     rm -f response.json
