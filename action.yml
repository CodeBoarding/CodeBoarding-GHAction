name: 'CodeBoarding [Diagram-First Documentation]'
description: 'Generates diagram-first visualizations of your codebase using static analysis and large language models.'
author: 'CodeBoarding'

branding:
  icon: 'file-text'
  color: 'blue'

inputs:
  output_directory:
    description: 'Directory where documentation files will be saved'
    required: false
    default: '.codeboarding'
  
  repository_url:
    description: 'Repository URL to fetch documentation for (defaults to current repository)'
    required: true

outputs:
  files_created:
    description: 'Number of files created'
    value: ${{ steps.process-docs.outputs.files_created }}
  
  output_directory:
    description: 'Directory where files were saved'
    value: ${{ steps.process-docs.outputs.output_directory }}
  
  has_changes:
    description: 'Whether any files were created or changed'
    value: ${{ steps.process-docs.outputs.has_changes }}

runs:
  using: 'composite'
  steps:
    - name: Determine repository URL
      id: repo-url
      shell: bash
      run: |
        if [ "${{ inputs.repository_url }}" != "" ]; then
          REPO_URL="${{ inputs.repository_url }}"
          echo "Using provided repository URL: $REPO_URL"
        else
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          echo "Using current repository URL: $REPO_URL"
        fi
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

    - name: Fetch documentation files
      id: fetch-docs
      shell: bash
      run: |
        ENDPOINT_URL="https://f61a-78-90-86-250.ngrok-free.app/github_action"
        REPO_URL="${{ steps.repo-url.outputs.repo_url }}"
        
        echo "Fetching documentation from: $ENDPOINT_URL?url=$REPO_URL"
        
        # Create temporary file for response
        TEMP_FILE=$(mktemp)
        
        # Make the API call and save response
        response=$(curl -s -w "%{http_code}" -o "$TEMP_FILE" "$ENDPOINT_URL?url=$REPO_URL")
        http_code=${response: -3}
        
        if [ "$http_code" != "200" ]; then
          echo "Error: API call failed with status code $http_code"
          cat "$TEMP_FILE"
          rm -f "$TEMP_FILE"
          exit 1
        fi
        
        # Check if response is valid JSON
        if ! jq empty "$TEMP_FILE" 2>/dev/null; then
          echo "Error: Invalid JSON response"
          cat "$TEMP_FILE"
          rm -f "$TEMP_FILE"
          exit 1
        fi
        
        echo "API call successful"
        echo "response_file=$TEMP_FILE" >> $GITHUB_OUTPUT

    - name: Process documentation files
      id: process-docs
      shell: bash
      run: |
        RESPONSE_FILE="${{ steps.fetch-docs.outputs.response_file }}"
        OUTPUT_DIR="${{ inputs.output_directory }}"
        
        # Create the output directory
        mkdir -p "$OUTPUT_DIR"
        
        # Initialize counters
        FILES_CREATED=0
        
        echo "=== Processing Documentation Files ==="
        echo "Response JSON structure:"
        jq . "$RESPONSE_FILE"
        
        # Parse JSON response and create files using keys as filenames
        if jq -e '.files' "$RESPONSE_FILE" > /dev/null; then
          echo "Files key found, proceeding to create files..."
          
          # Get each key from files object and create a file with that name
          jq -r '.files | keys[]' "$RESPONSE_FILE" | while read -r filename; do
            echo "Processing file: $filename"
            
            # Get the content for this filename
            content=$(jq -r ".files[\"$filename\"]" "$RESPONSE_FILE")
            
            # Add .md extension if not present
            if [[ "$filename" != *.md ]]; then
              output_filename="${filename}.md"
            else
              output_filename="$filename"
            fi
            
            # Write content to file
            echo "$content" > "$OUTPUT_DIR/$output_filename"
            echo "Created file: $OUTPUT_DIR/$output_filename"
            
            # Increment counter
            FILES_CREATED=$((FILES_CREATED + 1))
          done
          
          # Since we're in a subshell, we need to count files differently
          FILES_CREATED=$(ls -1 "$OUTPUT_DIR"/*.md 2>/dev/null | wc -l || echo "0")
        else
          echo "No 'files' key found in response JSON"
          FILES_CREATED=0
        fi
        
        # Clean up temporary file
        rm -f "$RESPONSE_FILE"
        
        # Check if any files were created
        if [ "$FILES_CREATED" -gt 0 ]; then
          HAS_CHANGES="true"
          echo "Created $FILES_CREATED files in $OUTPUT_DIR"
          
          # List created files
          echo "Files created:"
          ls -la "$OUTPUT_DIR"
        else
          HAS_CHANGES="false"
          echo "No files were created"
        fi
        
        # Set outputs
        echo "files_created=$FILES_CREATED" >> $GITHUB_OUTPUT
        echo "output_directory=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
